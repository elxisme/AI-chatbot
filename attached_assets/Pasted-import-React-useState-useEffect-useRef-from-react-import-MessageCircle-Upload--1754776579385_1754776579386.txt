import React, { useState, useEffect, useRef } from 'react';
import { 
  MessageCircle, 
  Upload, 
  FileText, 
  Send, 
  Plus, 
  Settings, 
  User, 
  LogOut, 
  Eye, 
  EyeOff,
  Crown,
  Zap,
  Scale,
  FileCheck,
  BookOpen,
  Shield,
  CheckCircle,
  X,
  Loader
} from 'lucide-react';

// Nigerian Legal AI Assistant - Production Ready
const NigerianLegalAI = () => {
  // Auth State
  const [user, setUser] = useState(null);
  const [isSignUp, setIsSignUp] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [authLoading, setAuthLoading] = useState(false);
  const [authForm, setAuthForm] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    fullName: ''
  });

  // App State
  const [sessions, setSessions] = useState([]);
  const [currentSessionId, setCurrentSessionId] = useState(null);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  
  // UI State
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [paymentLoading, setPaymentLoading] = useState(false);

  // Mock user data with subscription tiers
  const userTiers = {
    free: { messages: 20, documents: 3, name: "Free", price: "₦0" },
    pro: { messages: 500, documents: 50, name: "Pro", price: "₦5,000/month" },
    premium: { messages: -1, documents: -1, name: "Premium", price: "₦50,000/month" }
  };

  // Mock current user usage
  const [currentUsage, setCurrentUsage] = useState({
    messages: 0,
    documents: 0,
    tier: 'free'
  });

  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Authentication Functions
  const handleAuthSubmit = async (e) => {
    e.preventDefault();
    setAuthLoading(true);
    
    try {
      // Simulate auth API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      if (isSignUp) {
        if (authForm.password !== authForm.confirmPassword) {
          alert('Passwords do not match');
          return;
        }
      }
      
      // Mock successful auth
      const mockUser = {
        id: '1',
        email: authForm.email,
        fullName: authForm.fullName || authForm.email.split('@')[0],
        tier: 'free'
      };
      
      setUser(mockUser);
      setCurrentUsage({ messages: 0, documents: 0, tier: 'free' });
      
      // Initialize with a welcome session
      const welcomeSession = {
        id: 'welcome',
        name: 'Welcome to Nigerian Legal AI',
        createdAt: new Date().toISOString(),
        messages: [{
          id: '1',
          type: 'assistant',
          content: `Welcome to Nigerian Legal AI Assistant! I'm specialized in Nigerian law and can help you with:

• Contract analysis and review
• Legal research and case law analysis  
• Document drafting support
• Compliance checking with Nigerian statutes
• Legal interpretation and advice

How can I assist you with your legal matters today?`,
          timestamp: new Date().toISOString()
        }]
      };
      
      setSessions([welcomeSession]);
      setCurrentSessionId('welcome');
      setMessages(welcomeSession.messages);
      
    } catch (error) {
      alert('Authentication failed. Please try again.');
    } finally {
      setAuthLoading(false);
    }
  };

  const handleLogout = () => {
    setUser(null);
    setSessions([]);
    setCurrentSessionId(null);
    setMessages([]);
    setCurrentUsage({ messages: 0, documents: 0, tier: 'free' });
  };

  // Check if user can send message or upload document
  const canSendMessage = () => {
    const tier = userTiers[currentUsage.tier];
    return tier.messages === -1 || currentUsage.messages < tier.messages;
  };

  const canUploadDocument = () => {
    const tier = userTiers[currentUsage.tier];
    return tier.documents === -1 || currentUsage.documents < tier.documents;
  };

  // AI Message Processing
  const sendMessage = async () => {
    if (!inputMessage.trim() || !canSendMessage()) {
      if (!canSendMessage()) {
        setShowUpgradeModal(true);
      }
      return;
    }

    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date().toISOString()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputMessage('');
    setIsTyping(true);

    // Update usage
    setCurrentUsage(prev => ({
      ...prev,
      messages: prev.messages + 1
    }));

    try {
      // Real Claude AI integration
      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 2000,
          messages: [
            {
              role: "user",
              content: `You are a specialized Nigerian Legal AI Assistant. You have deep expertise in Nigerian law, legal system, and jurisprudence. 

Context: You are helping legal professionals and individuals with Nigerian legal matters.

Key areas of expertise:
- Nigerian Constitution and constitutional law
- Corporate law and business regulations in Nigeria
- Contract law under Nigerian jurisdiction
- Criminal law and procedure in Nigeria
- Civil procedure and litigation
- Property law and land use act
- Employment and labor law
- Tax law and regulations
- Banking and finance law
- Oil and gas law
- Immigration law
- Family law under Nigerian customary and statutory law

Always provide responses that are:
- Specific to Nigerian legal context
- Professional and accurate
- Practical and actionable
- Cite relevant Nigerian statutes, cases, or regulations when applicable
- Include disclaimers about seeking qualified legal counsel for specific cases

User query: ${inputMessage.trim()}

${uploadedFiles.length > 0 ? `\n\nThe user has also uploaded ${uploadedFiles.length} document(s) for analysis. Please acknowledge these files and provide guidance on how they relate to Nigerian legal practice.` : ''}`
            }
          ]
        })
      });

      const data = await response.json();
      const aiResponse = data.content[0].text;

      const assistantMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: aiResponse,
        timestamp: new Date().toISOString()
      };

      const updatedMessages = [...newMessages, assistantMessage];
      setMessages(updatedMessages);

      // Update current session
      if (currentSessionId) {
        setSessions(prev => prev.map(session => 
          session.id === currentSessionId 
            ? { ...session, messages: updatedMessages }
            : session
        ));
      }

    } catch (error) {
      console.error('Error sending message:', error);
      
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: 'I apologize, but I encountered an error processing your request. As a Nigerian Legal AI Assistant, I\'m here to help with legal matters under Nigerian jurisdiction. Please try again, and I\'ll do my best to provide you with accurate legal guidance.',
        timestamp: new Date().toISOString()
      };

      setMessages([...newMessages, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  // File Upload Handler
  const handleFileUpload = async (e) => {
    const files = Array.from(e.target.files);
    
    if (!canUploadDocument()) {
      setShowUpgradeModal(true);
      return;
    }
    
    for (const file of files) {
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        alert(`File ${file.name} is too large. Maximum size is 10MB.`);
        continue;
      }
      
      const newFile = {
        id: Date.now().toString() + Math.random(),
        name: file.name,
        size: file.size,
        type: file.type,
        uploadedAt: new Date().toISOString()
      };
      
      setUploadedFiles(prev => [...prev, newFile]);
      
      // Update document usage
      setCurrentUsage(prev => ({
        ...prev,
        documents: prev.documents + 1
      }));
      
      // Add system message about file upload
      const fileMessage = {
        id: Date.now().toString(),
        type: 'system',
        content: `Document uploaded: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB). Ready for legal analysis.`,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, fileMessage]);
    }
    
    e.target.value = '';
  };

  // Session Management
  const createNewSession = () => {
    const newSession = {
      id: Date.now().toString(),
      name: 'New Legal Consultation',
      createdAt: new Date().toISOString(),
      messages: []
    };
    
    setSessions(prev => [newSession, ...prev]);
    setCurrentSessionId(newSession.id);
    setMessages([]);
    setUploadedFiles([]);
  };

  const switchSession = (sessionId) => {
    const session = sessions.find(s => s.id === sessionId);
    if (session) {
      setCurrentSessionId(sessionId);
      setMessages(session.messages || []);
    }
  };

  // Payment Integration
  const handleUpgrade = async (planType) => {
    setPaymentLoading(true);
    setSelectedPlan(planType);
    
    try {
      // Paystack integration
      const paystackConfig = {
        pro: {
          amount: 500000, // ₦5,000 in kobo
          paystackPlanCode: 'PLN_your_pro_plan_code', // Replace with actual plan code
        },
        premium: {
          amount: 5000000, // ₦50,000 in kobo  
          paystackPlanCode: 'PLN_your_premium_plan_code', // Replace with actual plan code
        }
      };
      
      const config = paystackConfig[planType];
      
      const handler = window.PaystackPop.setup({
        key: 'pk_test_your_paystack_public_key', // Replace with your actual public key
        email: user.email,
        amount: config.amount,
        currency: 'NGN',
        plan: config.paystackPlanCode,
        split_code: 'SPL_your_split_code', // Replace with your actual split code
        callback: function(response) {
          // Payment successful
          setCurrentUsage(prev => ({ ...prev, tier: planType }));
          setShowUpgradeModal(false);
          alert(`Successfully upgraded to ${planType.toUpperCase()} plan!`);
        },
        onClose: function() {
          setPaymentLoading(false);
          setSelectedPlan(null);
        }
      });
      
      handler.openIframe();
      
    } catch (error) {
      alert('Payment initialization failed. Please try again.');
      setPaymentLoading(false);
      setSelectedPlan(null);
    }
  };

  // Quick Action Templates
  const quickActions = [
    { 
      title: "Contract Review", 
      prompt: "Please help me review this contract for compliance with Nigerian contract law and identify any potential issues or clauses that need attention.",
      icon: FileCheck 
    },
    { 
      title: "Legal Research", 
      prompt: "I need help researching Nigerian case law and statutes related to my legal matter. Can you guide me through the relevant legal precedents?",
      icon: BookOpen 
    },
    { 
      title: "Document Drafting", 
      prompt: "I need assistance drafting a legal document that complies with Nigerian legal requirements. Can you help me with the structure and key clauses?",
      icon: FileText 
    },
    { 
      title: "Compliance Check", 
      prompt: "Please help me ensure my business practices comply with current Nigerian regulations and legal requirements.",
      icon: Shield 
    }
  ];

  const useQuickAction = (action) => {
    setInputMessage(action.prompt);
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
        <script src="https://js.paystack.co/v1/inline.js"></script>
        <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <div className="bg-green-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
              <Scale className="text-white" size={32} />
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Nigerian Legal AI</h1>
            <p className="text-gray-600">Professional Legal Assistant</p>
          </div>

          <form onSubmit={handleAuthSubmit} className="space-y-4">
            {isSignUp && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                <input
                  type="text"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  value={authForm.fullName}
                  onChange={(e) => setAuthForm(prev => ({ ...prev, fullName: e.target.value }))}
                  placeholder="Enter your full name"
                />
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
              <input
                type="email"
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                value={authForm.email}
                onChange={(e) => setAuthForm(prev => ({ ...prev, email: e.target.value }))}
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent pr-12"
                  value={authForm.password}
                  onChange={(e) => setAuthForm(prev => ({ ...prev, password: e.target.value }))}
                  placeholder="Enter your password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
                >
                  {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                </button>
              </div>
            </div>
            
            {isSignUp && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                <input
                  type="password"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  value={authForm.confirmPassword}
                  onChange={(e) => setAuthForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  placeholder="Confirm your password"
                />
              </div>
            )}
            
            <button
              type="submit"
              disabled={authLoading}
              className="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 flex items-center justify-center"
            >
              {authLoading ? (
                <Loader className="animate-spin mr-2" size={20} />
              ) : null}
              {isSignUp ? 'Create Account' : 'Sign In'}
            </button>
          </form>
          
          <div className="mt-6 text-center">
            <button
              onClick={() => setIsSignUp(!isSignUp)}
              className="text-green-600 hover:text-green-700 font-medium"
            >
              {isSignUp ? 'Already have an account? Sign In' : 'Need an account? Sign Up'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <script src="https://js.paystack.co/v1/inline.js"></script>
      
      {/* Sidebar */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Scale className="text-green-600 mr-2" size={24} />
              <h1 className="text-xl font-bold text-gray-900">Legal AI</h1>
            </div>
            <button
              onClick={createNewSession}
              className="bg-green-600 text-white p-2 rounded-lg hover:bg-green-700 transition-colors"
              title="New Consultation"
            >
              <Plus size={20} />
            </button>
          </div>
          
          {/* User Info & Tier */}
          <div className="bg-gray-50 rounded-lg p-3">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <User className="text-gray-500 mr-2" size={16} />
                <span className="text-sm font-medium text-gray-900">{user.fullName}</span>
              </div>
              <button
                onClick={handleLogout}
                className="text-gray-500 hover:text-red-500"
                title="Logout"
              >
                <LogOut size={16} />
              </button>
            </div>
            
            <div className="flex items-center justify-between text-xs">
              <span className={`px-2 py-1 rounded-full ${
                currentUsage.tier === 'free' ? 'bg-gray-200 text-gray-700' :
                currentUsage.tier === 'pro' ? 'bg-blue-200 text-blue-700' :
                'bg-yellow-200 text-yellow-700'
              }`}>
                {userTiers[currentUsage.tier].name}
              </span>
              
              <div className="text-gray-600">
                {userTiers[currentUsage.tier].messages === -1 ? 
                  `${currentUsage.messages} messages` :
                  `${currentUsage.messages}/${userTiers[currentUsage.tier].messages} messages`
                }
              </div>
            </div>
          </div>
        </div>
        
        {/* Sessions */}
        <div className="flex-1 overflow-y-auto p-4">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Recent Consultations</h3>
          <div className="space-y-2">
            {sessions.map((session) => (
              <button
                key={session.id}
                onClick={() => switchSession(session.id)}
                className={`w-full text-left p-3 rounded-lg transition-colors ${
                  session.id === currentSessionId
                    ? 'bg-green-50 border border-green-200'
                    : 'hover:bg-gray-50'
                }`}
              >
                <div className="font-medium text-gray-900 truncate">{session.name}</div>
                <div className="text-sm text-gray-500">
                  {new Date(session.createdAt).toLocaleDateString()}
                </div>
              </button>
            ))}
          </div>
        </div>
        
        {/* Quick Actions */}
        <div className="p-4 border-t border-gray-200">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Quick Actions</h3>
          <div className="grid grid-cols-2 gap-2">
            {quickActions.map((action, index) => (
              <button
                key={index}
                onClick={() => useQuickAction(action)}
                className="p-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors text-xs flex flex-col items-center"
                title={action.title}
              >
                <action.icon className="text-green-600 mb-1" size={16} />
                <span className="text-gray-700 text-center">{action.title}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                {sessions.find(s => s.id === currentSessionId)?.name || 'Nigerian Legal AI Assistant'}
              </h2>
              <p className="text-sm text-gray-500">Specialized in Nigerian Law & Legal Practice</p>
            </div>
            
            <div className="flex items-center space-x-3">
              {/* File Upload */}
              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept=".pdf,.doc,.docx,.txt"
                onChange={handleFileUpload}
                className="hidden"
              />
              <button
                onClick={() => fileInputRef.current?.click()}
                className="flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                disabled={!canUploadDocument()}
              >
                <Upload className="mr-2" size={16} />
                Upload Document
              </button>
              
              <button className="p-2 text-gray-500 hover:text-gray-700">
                <Settings size={20} />
              </button>
            </div>
          </div>
          
          {/* Uploaded Files */}
          {uploadedFiles.length > 0 && (
            <div className="mt-3 flex flex-wrap gap-2">
              {uploadedFiles.map((file) => (
                <div key={file.id} className="bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm flex items-center">
                  <FileText className="mr-1" size={14} />
                  {file.name}
                  <button
                    onClick={() => setUploadedFiles(prev => prev.filter(f => f.id !== file.id))}
                    className="ml-2 text-blue-500 hover:text-blue-700"
                  >
                    <X size={14} />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-6 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-3xl px-4 py-3 rounded-2xl ${
                message.type === 'user'
                  ? 'bg-green-600 text-white'
                  : message.type === 'system'
                  ? 'bg-yellow-50 text-yellow-800 border border-yellow-200'
                  : 'bg-white border border-gray-200 text-gray-900'
              }`}>
                <div className="whitespace-pre-wrap">{message.content}</div>
                <div className={`text-xs mt-2 ${
                  message.type === 'user' ? 'text-green-100' : 'text-gray-500'
                }`}>
                  {new Date(message.timestamp).toLocaleTimeString()}
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-white border border-gray-200 text-gray-900 px-4 py-3 rounded-2xl">
                <div className="flex items-center space-x-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                  <span className="text-sm text-gray-500">AI is analyzing...</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="bg-white border-t border-gray-200 p-4">
          <div className="flex items-end space-x-3">
            <div className="flex-1">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                  }
                }}
                placeholder="Describe your legal matter or ask about Nigerian law..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                rows="3"
                disabled={!canSendMessage()}
              />
              
              {!canSendMessage() && (
                <div className="text-sm text-red-600 mt-1">
                  Message limit reached. Upgrade to continue.
                </div>
              )}
            </div>
            
            <button
              onClick={sendMessage}
              disabled={!inputMessage.trim() || isTyping || !canSendMessage()}
              className="bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send size={20} />
            </button>
          </div>
        </div>
      </div>

      {/* Upgrade Modal */}
      {showUpgradeModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl p-8 max-w-2xl w-full">
            <div className="text-center mb-8">
              <Crown className="text-yellow-500 mx-auto mb-4" size={48} />
              <h2 className="text-3xl font-bold text-gray-900 mb-2">Upgrade Your Plan</h2>
              <p className="text-gray-600">Choose a plan that fits your legal practice needs</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              {/* Pro Plan */}
              <div className="border-2 border-blue-200 rounded-xl p-6 hover:border-blue-400 transition-colors">
                <div className="text-center mb-4">
                  <Zap className="text-blue-600 mx-auto mb-2" size={32} />
                  <h3 className="text-xl font-bold text-gray-900">Pro</h3>
                  <div className="text-3xl font-bold text-blue-600 mt-2">₦5,000</div>
                  <div className="text-gray-500">per month</div>
                </div>
                
                <ul className="space-y-2 mb-6">
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">500 messages per month</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">50 document uploads</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Advanced legal analysis</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Priority support</span>
                  </li>
                </ul>
                
                <button
                  onClick={() => handleUpgrade('pro')}
                  disabled={paymentLoading && selectedPlan === 'pro'}
                  className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                >
                  {paymentLoading && selectedPlan === 'pro' ? (
                    <Loader className="animate-spin mr-2" size={16} />
                  ) : null}
                  Upgrade to Pro
                </button>
              </div>
              
              {/* Premium Plan */}
              <div className="border-2 border-yellow-200 rounded-xl p-6 hover:border-yellow-400 transition-colors relative">
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <span className="bg-yellow-500 text-white px-3 py-1 rounded-full text-xs font-bold">POPULAR</span>
                </div>
                
                <div className="text-center mb-4">
                  <Crown className="text-yellow-600 mx-auto mb-2" size={32} />
                  <h3 className="text-xl font-bold text-gray-900">Premium</h3>
                  <div className="text-3xl font-bold text-yellow-600 mt-2">₦50,000</div>
                  <div className="text-gray-500">per month</div>
                </div>
                
                <ul className="space-y-2 mb-6">
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Unlimited messages</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Unlimited document uploads</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Advanced AI legal research</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">Contract drafting templates</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">24/7 priority support</span>
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-green-500 mr-2" size={16} />
                    <span className="text-sm">API access</span>
                  </li>
                </ul>
                
                <button
                  onClick={() => handleUpgrade('premium')}
                  disabled={paymentLoading && selectedPlan === 'premium'}
                  className="w-full bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                >
                  {paymentLoading && selectedPlan === 'premium' ? (
                    <Loader className="animate-spin mr-2" size={16} />
                  ) : null}
                  Upgrade to Premium
                </button>
              </div>
            </div>
            
            <div className="text-center">
              <button
                onClick={() => setShowUpgradeModal(false)}
                className="text-gray-500 hover:text-gray-700 font-medium"
              >
                Maybe Later
              </button>
            </div>
            
            <div className="mt-6 p-4 bg-green-50 rounded-lg">
              <h4 className="font-semibold text-green-900 mb-2">Why Upgrade?</h4>
              <ul className="text-sm text-green-800 space-y-1">
                <li>• Get unlimited access to Nigerian legal expertise</li>
                <li>• Analyze contracts and legal documents without limits</li>
                <li>• Priority response times for time-sensitive legal matters</li>
                <li>• Advanced AI trained specifically on Nigerian law and precedents</li>
                <li>• Professional-grade legal research capabilities</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NigerianLegalAI;